<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[深藏若虛]]></title>
  <link href="http://blog.fntsr.tw/atom.xml" rel="self"/>
  <link href="http://blog.fntsr.tw/"/>
  <updated>2014-12-17T04:00:01+08:00</updated>
  <id>http://blog.fntsr.tw/</id>
  <author>
    <name><![CDATA[Ruoshi Ling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Command Diagram]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/12/15/docker-command-diagram/"/>
    <updated>2014-12-15T00:45:26+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/12/15/docker-command-diagram</id>
    <content type="html"><![CDATA[<h2>Docker 指令示意圖</h2>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-15-docker-command-diagram/1_1.png?1418747640"><img src="http://blog.fntsr.tw/images/posts/2014-12-15-docker-command-diagram/1_1.png?1418747640" width="512" height="384"></a></p>

<p>看到《Docker —— 從入門到實踐­》正體中文版<a href="http://philipzheng.gitbooks.io/docker_practice/content/appendix_command/README.html">附錄一：命令查詢</a>裏有「一張圖總結 Docker 的命令」的圖，一時興起，就嘗試重畫一張圖，把所有指令都排進去。</p>

<p>若有什麼認為需要修正的，歡迎在本篇文章留言、討論。</p>

<!-- more -->


<h1>Update Log</h1>

<h3>2014-12-14</h3>

<ul>
<li>經 @yorkoliu 指出，修正了 export 的關係。並將 Tar files 分成兩個部分。</li>
<li>修改標題顏色。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let Students Try Docker at DigtialOcean!]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/12/11/student-docker-resource/"/>
    <updated>2014-12-11T01:20:58+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/12/11/student-docker-resource</id>
    <content type="html"><![CDATA[<h2>讓學生透過 DigitalOcean 嘗試 Docker！</h2>

<p>Docker 是最近正夯的輕量化虛擬技術，也是我希望能多多推廣的。適逢最近要去<a href="http://ntustcoding.club/">台科大程式設計社</a>演講，希望在演講時，聽眾也能在下方一起操作。但是一項技術在推廣時，第一個遇到的門檻就是安裝，為了避免在網路上已經很多教學文的安裝花費太多時間，所以希望能讓聽眾透過 VPS 去使用 Docker，所以寫了這邊文章去推廣這種方式。這樣既避免安裝的過程，也讓現場省下許多下載 Image 頻寬，避免網路爆炸。</p>

<p>本文章主要是教導如何透過 DigitalOcean 開一個已經有 Docker 的 VPS。在過程中會順便推廣 Github 的 Student Developer Pack 有關 DigitalOcean  100 美金的資源。若不是學生身份，亦可透過本文的連結註冊，得到 10 美金的 Referral 額度。</p>

<!-- more -->


<h1>註冊 DigitalOcean</h1>

<p>開啟 <a href="http://goo.gl/P9rn2B">DigitalOcean</a> 的首頁，然後在中間的表單填上您的 電子郵件與密碼。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_1.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_1.png" width="512" height="384"></a></p>

<p>送出表單後，就會被引導到使用者後台。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_2.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_2.png" width="512" height="384"></a></p>

<p>然後我們要去收信，驗證我們的電子郵件。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_3.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_3.png" width="512" height="384"></a></p>

<p>如果你是透過上面的連結申請，會因為是透過 referral code link 申請的使用者，而收到另一封信，說您已經得到 10 美金的額度。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_4.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_4.png" width="512" height="384"></a></p>

<p>驗證後，您就會被轉到<a href="https://cloud.digitalocean.com/user_payment_profiles">使用者付款頁面</a>，請你填寫您的信用卡資訊去啟用服務。若是沒有信用卡，亦可請朋友透過 Paypal 幫忙轉五美金的一次性付款去啟用。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_5.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/1_5.png" width="512" height="384"></a></p>

<h1>申請 Github 的 Student Developer Pack</h1>

<p>若是還沒有註冊 <a href="">Github</a>，請先去註冊一個帳號，然後登入。</p>

<p>接著到 <a href="">Github Education</a> 的 <a href="">Student Developer Pack</a> 網頁，點選頁面中間的「Get Your Pack」，或是右上角的 Request a discount。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_1.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_1.png" width="512" height="384"></a></p>

<p>點選後會出現表單，在步驟一，只需要選取你的身份和你要把這個優惠用在使用者帳號還是組織帳號。這裏只需選取 Student 和 Individual account 即可。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_2.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_2.png" width="512" height="384"></a></p>

<p>步驟二裡，你填寫你的名稱、學校信箱、學校名稱、畢業年份以及你打算怎麼使用Github。這裏都要填寫英文，可去學校首頁找找學校的英文名稱。比較重要的是選擇你的學校信箱，若是你還沒通過這類驗證，你可以點選「<a href="https://github.com/settings/emails">add and verify it</a>」，去個人後台驗證你的學校信箱。至於如何使用，你就照實填寫就好，像我就是寫 Practice coding and git。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_3.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_3.png" width="512" height="384"></a></p>

<p>等認證通過後，到 Student Developer Pack 頁面重新整理，或是再次點選「Get Your Pack」，就可以看到頁面原本的「Get Your Pack」消失了，而改成一個以黃底黑字的「My Pack」。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_4.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_4.png" width="512" height="384"></a></p>

<p>然後我們在下方服務中，尋找 DigitalOcean 。你會看到旁邊就會有你的 Promo Code 囉。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_5.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_5.png" width="512" height="384"></a></p>

<p>將 Code 複製下來，然後來到<a href="https://cloud.digitalocean.com/user_payment_profiles">使用者付款頁面</a>，看到 Promo Code 的部分，將我們 Code 貼上，他就會自動認證。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_6.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/2_6.png" width="512" height="384"></a></p>

<p>認證成功後，來到 <a href="https://cloud.digitalocean.com/billing">Billing</a> 頁面，你就會發現你多了 100 美金的額度，夠讓你使用一陣子。</p>

<h1>建立 VPS</h1>

<p>接著點選左邊導覽列的 <a href="https://cloud.digitalocean.com/droplets/new">Create</a> ，我們要來開始建立我們 VPS 囉！</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/3_1.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/3_1.png" width="512" height="384"></a></p>

<h4>Droplet Hostname</h4>

<p>這裏是填寫你的 VPS 名稱，看你習慣怎麼命名。我自己是把我的 VPS 用魔戒系列人物命名啦。=P</p>

<h4>Select Size</h4>

<p>選擇 VPS 的使用方案，一般來說只需使用 5 美金的方案即可。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/3_2.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/3_2.png" width="512" height="384"></a></p>

<h4>Select Region</h4>

<p>選擇地區，也就是選擇 VPS 的機房所在。為了保持較良好的連線速度，選擇位在亞洲的新加坡機房是比較好的。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/3_3.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/3_3.png" width="512" height="384"></a></p>

<h4>Available Settings</h4>

<p>這裏目前不需要設定。若是懂項目意思的可以自行斟酌。</p>

<h4>Select Image</h4>

<p>選擇你 VPS 所使用的初始映像檔，並分別有五個分頁。為了讓我們能快速使用 Docker ，我們選擇 Applications 分頁的 Docker 1.3.2 on 14.04 的映像檔。DigitalOcean 會在建立 VPS 時，安裝 Ubuntu 14.04 的作業系統，並在裡面裝好 Docker！</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/3_4.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/3_4.png" width="512" height="384"></a></p>

<h4>Add SSH Keys</h4>

<p>增加 SSH 金鑰。這是選填項目，但是基於安全性考量，我極度建議你使用。關於相關說明，可以Google 「<a href="https://www.google.com.tw/webhp?#newwindow=1&amp;q=SSH+%E7%99%BB%E5%85%A5">SSH 登入</a>」去學習。</p>

<h1>連線與測試</h1>

<p>當 VPS 建立完成後，進到 VPS 狀態頁面，在上方就可以看到自己的 IP。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/4_1.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/4_1.png" width="512" height="384"></a></p>

<p>因為我們前面有設定 SSH 登入，所以就可以不用打密碼，直接透過 terminal 下 SSH 連線到 VPS。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/4_2.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/4_2.png" width="512" height="384"></a></p>

<p>最後，在 terminal 輸入<code>docker version</code>的指令，若有安裝成功，就會顯示 Docker 的版本資訊囉！</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/4_3.png"><img src="http://blog.fntsr.tw/images/posts/2014-12-11-student-docker-resource/4_3.png" width="512" height="384"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[December of 2014]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/11/30/december-of-2014/"/>
    <updated>2014-11-30T23:58:05+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/11/30/december-of-2014</id>
    <content type="html"><![CDATA[<h2>來到 2014 年的 12 月，半年回顧</h2>

<p>在 11 月的倒數三分鐘開始寫起了這篇文章，<br/>
並在 12 月的第一天發表。<br/></p>

<p>學期來到了尾聲，十二月到了，<br/>
是一個值得沈澱的時期，把過去的種種做個收尾。<br/>
回首半年，是一個很好的開始。<br/></p>

<!-- more -->


<h2>六月</h2>

<p>與家人去了日本，彌補了自己沒有畢旅的憾。<br/>
走過畢業典禮的儀式，在還來不及紀念下，結束了期末考。<br/>
然後，與歷史學系道別，我走向了另一條路。<br/></p>

<p>感謝歷史系、學生會在這四年給了我許多經驗與回憶，<br/>
對於身邊的人的幫助與砥礪，只有感謝與感謝。<br/></p>

<p>隨後，整理房間散落的回憶，我搬離的台中，回到了老家休息。<br/>
匆匆的一週過後，我就又帶著新整理出來的行囊，來到了中壢。<br/>
簡單佈置了新租處後，開始了新生活。<br/></p>

<h2>七月，</h2>

<p>走進了 EZTABLE，開始為時兩個月暑期實習，<br/>
在 Kernel Team 展開了全新的團隊開發的冒險。<br/></p>

<p>期間參加了大拜拜 COSCUP，與舊雨新知聚聚吃飯。<br/>
然後繼續實習，桃園與台北之間，日日來回。<br/></p>

<h2>八月</h2>

<p>進度算是超前，與公司告了假，去了高雄約會玩耍。<br/>
天搖地動，竟然遭遇了氣爆事件，至今仍心有餘悸。<br/></p>

<p>逐漸收尾公司的進度，因為月底要到了，<br/>
結束前一週 Presentation，接著在最後一週嘗試報了 Docker。<br/>
很珍惜這些演說的機會。<br/></p>

<p>感謝 EZTABLE 在這兩個月給予我的新視野，<br/>
我體驗了一個美式文化的開發經驗，認識了許多強大的前輩，<br/>
在這工作很愉快，很喜歡這裡的夥伴，希望畢業後有機會能回來。<br/></p>

<h2>九月</h2>

<p>結束了實習，在開學前趕緊著放自己假，出去走走，<br/>
去年遇到颱風擱置的花蓮旅，終於如願以償，感謝親愛的。<br/></p>

<p>開學，走進了實驗室，從那時起，我不再只是歷史學徒，<br/>
軟體工程所，讓我聽著就興奮的新方向，我走回了資訊本科。<br/></p>

<h2>十月</h2>

<p>這是一個特殊的月份，<br/>
慶祝了兩週年紀念日以及二十四歲生日（老），<br/>
都這把年紀了感覺還一事無成呢。<br/></p>

<p>接著就是讓我全力以備的 PHPConf 2014，<br/>
講述 Docker 這個火熱的工具，很感謝會眾的喜愛，受寵若驚。<br/>
會後問卷調查的建言與指教，我銘記在心，謝謝您們點出我的不足。<br/></p>

<h2>十一月</h2>

<p>這大概是最挫敗與沮喪的月份，我面臨了學業的困境。<br/>
尤其是牽扯到數論的應用密碼學，我深深感受到自己的弱點。<br/></p>

<p>歷經期中考，我逃避了一段時間。<br/>
我開始打起遊戲、陷入渾渾噩噩、作息又幾近日夜顛倒。<br/></p>

<p>但是，夠了。沒有目標的靈魂是迷茫地。該清醒了。<br/>
回台中休養了，投下第二次市長選舉，同時也給自己一巴掌。<br/></p>

<p>看著柯文哲不斷的努力與成功，我得到了鼓勵。<br/>
對於台灣大環境我不再絕望與恐懼，不再封鎖自己。<br/>
這次的選舉也點燃我對於新社會的希望。<br/></p>

<p>社會在進步，我不能停滯，<br/>
我也希望加入改革，從自己做起。<br/></p>

<p>最後，來到了十二月，一年的尾聲。<br/></p>

<h2>十二月</h2>

<p>沈澱後，訂定目標，努力執行。<br/></p>

<p>「當你真心渴望追求某種事物的話，整個宇宙都會聯合起來幫你完成。」 &ndash; 牧羊少年奇幻之旅<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Can't Resolve github.com]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/11/08/docker-cant-resolve-github-dot-com/"/>
    <updated>2014-11-08T02:30:47+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/11/08/docker-cant-resolve-github-dot-com</id>
    <content type="html"><![CDATA[<h2>Docker 無法解析 github.com</h2>

<p>在 Ubuntu 環境下，使用 Docker 架設 Discourse 時遇到了問題，錯誤訊息如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fatal: unable to access 'https://github.com/SamSaffron/pups.git/': Could not resolve host: github.com
</span><span class='line'>fb4e120a8b107f0ec1e07b3e21a3a1f31e3a5879d30da65242e0333b30533efa
</span><span class='line'>FAILED TO BOOTSTRAP</span></code></pre></td></tr></table></div></figure>


<p>這個問題的是 DNS 相關的錯誤，我們只要幫 Docker 指定 DNS Server 即可。解決辦法依照你安裝 Docker 的方式而異。</p>

<!-- more -->


<h3>via Ubuntu Package</h3>

<p>首先，打開 docker 的設定檔。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim /etc/default/docker
</span></code></pre></td></tr></table></div></figure>


<p>然後，將下面這行取消註解。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DOCKER_OPTS</span><span class="o">=</span><span class="s2">&quot;--dns 8.8.8.8 --dns 8.8.4.4&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後，重啟 Docker Server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo service docker restart
</span></code></pre></td></tr></table></div></figure>


<h3>via Binary</h3>

<p>如果你是透過二進位檔案執行 Docker server，你只需在啟動 Docker daemon 時，加上 DNS 參數即可。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker -d -D --dns 8.8.8.8 --dns 8.8.4.4 <span class="p">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>8.8.8.8</code>和<code>8.8.4.4</code>都是 Google 的 DNS，你也可以增修你喜歡的 DNS Server。</p>

<h1>Reference</h1>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-14-04">How To Install Discourse on Ubuntu 14.04</a></li>
<li><a href="https://meta.discourse.org/t/afatal-unable-to-access-https-github-com-samsaffron-pups-git-could-not-resolve-host-github-com/18611">A fatal: unable to access ‘https://github.com/SamSaffron/pups.git/’: Could not resolve host: github.com</a></li>
<li><a href="http://stackoverflow.com/questions/24151129/docker-network-calls-fail-during-image-build-on-corporate-network">Docker - Network calls fail during image build on corporate network</a></li>
<li><a href="http://linux.vbird.org/linux_server/0350dns.php#DNS_resolver_file">鳥哥的 Linux 私房菜 - 第十九章、主機名稱控制者： DNS 伺服器</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build Discourse With Docker]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/11/07/how-to-build-discourse-with-docker-1/"/>
    <updated>2014-11-07T15:15:59+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/11/07/how-to-build-discourse-with-docker-1</id>
    <content type="html"><![CDATA[<h2>如何使用 Docker 架設 Discourse</h2>

<p>Discourse 是一個使用 Ruby on Rails 編寫的開源論壇程式。與傳統論壇以看版（Boards）為單位去收束文章的方式不同，他是直接使用分類（Categories）作為篩選，讓你去檢視你想要看的文章。這種方式比較適合作為文章性質相近的討論平台，然後再去做比較細的分類。例如：「<a href="http://community.g0v.tw/">新． g0v 後勤中心</a>」就是討論有關零時政府的專案開發、或是「<a href="http://railsfun.tw/">RailsFun</a>」則專門針對 Ruby、Ruby on Rails 做手把手教學的討論與問答。</p>

<p>會特別以這篇論壇作為教學題材，除了它本身真的滿好用以外，重要得是官方有提供 Docker 支援！它讓我們可以輕鬆使用它寫好的設定，去架設 Discourse ，甚至同時架設數個都輕而易舉！官方都如此貼心了，那我們還不來試試嗎？</p>

<!-- more -->


<h1>Requirement</h1>

<p>在開始前，你必須先安裝下列項目，相關安裝方法，網路上已經滿多教學文了，可以喂狗問問。因為我們是把論壇架設在 Container 中，所以你不需要再去安裝 Ruby on Rails 或其他開發工具。</p>

<ul>
<li>Git</li>
<li>Docker</li>
</ul>


<h1>Before Begining</h1>

<p>在開始前，先做個說明。與官方教學文件不同，我這裡會將一些沒有提到可以改的地方做修改，讓讀者知道原來那邊是可以更換的，而不是以為「我只能這樣做」。比較大的改變如下，希望這些小改變能讓讀者懂得更加彈性的架設論壇。</p>

<ul>
<li>官方的安裝路徑是在<code>/var</code>下，本文則是使用<code>/srv</code>。</li>
<li>官方的設定檔名稱是<code>app.yml</code>，本文則是用<code>childish.yml</code>。</li>
<li>官方的 Port 設定是將 container <code>port 80</code> 對應到 host <code>port 80</code>，本文改成對應到 host <code>port 10080</code>。</li>
</ul>


<h1>Step1: Install Discourse</h1>

<p>首先，我們要把官方寫好的工具 <a href="https://github.com/discourse/discourse_docker">discourse/discourse_docker</a> <code>git clone</code> 下來。然後複製一份設定檔範例到該專案的 containers 資料夾下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 先移動到你想要放置專案的資料夾，通常會是 /var ，本例則是使用 /srv</span>
</span><span class='line'>~ <span class="nv">$ </span><span class="nb">cd</span> /srv
</span><span class='line'>
</span><span class='line'><span class="c"># 將 discourse_docker 專案 git clone 下來，並將資料夾名稱改為 discourse</span>
</span><span class='line'>/srv <span class="nv">$ </span>git clone https://github.com/discourse/discourse_docker.git discourse
</span><span class='line'>/srv <span class="nv">$ </span><span class="nb">cd </span>discourse
</span><span class='line'>
</span><span class='line'><span class="c"># 把 All in one 的設定範例複製一份到 container 資料夾，並改為自己想要的名稱，這裡是用`childish`。</span>
</span><span class='line'>/srv/discourse <span class="nv">$ </span>cp samples/standalone.yml containers/childish.yml
</span></code></pre></td></tr></table></div></figure>


<h1>Step2: Edit Configuration</h1>

<p>接下來我們要編輯設定，可以使用你熟悉的軟體去做編輯，這邊是使用<code>vim</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/srv/discourse <span class="nv">$ </span>vim containers/childish.yml
</span></code></pre></td></tr></table></div></figure>


<p>這裡會依照原本設定項目的順序，把需要修改的部分列出來。並且已做修改，可以和原值做比較。</p>

<figure class='code'><figcaption><span>/srv/discourse_docker/containers/childish.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">## 設定你要輸出的 Port，可以配合你網頁伺服器的設定，這裡是將`10080`對到`80`</span>
</span><span class='line'><span class="c1">## 若不想使用網頁伺服器，可以直接將`80`對到`80`，這樣就可以直接讀取你的 domain 做拜訪。</span>
</span><span class='line'><span class="l-Scalar-Plain">expose</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;10080:80&quot;</span>  <span class="c1"># 把 host 的 port 10080 轉到 container 的 port 80 (http)</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;2222:22&quot;</span>   <span class="c1"># 把 host 的 port 2222 轉到 container 的 port 22 (ssh)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## 分給資料庫的記憶體，如果你的記憶體有 1 GB，設定 128MB ，若有 4GB ，則建議設為 1GB</span>
</span><span class='line'><span class="l-Scalar-Plain">db_shared_buffers</span><span class="p-Indicator">:</span> <span class="s">&quot;256MB&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## Unicorn 的 workers 數量，如果你的記憶體有 1 GB ，則設定 2：若是有 2 GB ，則建議 3 或 4。</span>
</span><span class='line'><span class="l-Scalar-Plain">UNICORN_WORKERS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## 設定 DISCOURSE_DEVELOPER_EMAILS 為您的 Email，記得加單引號。</span>
</span><span class='line'><span class="l-Scalar-Plain">DISCOURSE_DEVELOPER_EMAILS</span><span class="p-Indicator">:</span> <span class="s">&#39;diz@childish.tw&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## 設定 DISCOURSE_HOSTNAME 為您的 hostname ，記得加單引號。</span>
</span><span class='line'><span class="c1">## 若只是架設在本機上，可以寫 localhost</span>
</span><span class='line'><span class="l-Scalar-Plain">DISCOURSE_HOSTNAME</span><span class="p-Indicator">:</span> <span class="s">&#39;diz.childish.tw&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## 設定郵件伺服器資訊，這裡很重要，若是沒設定好就無法使用論壇。非常不建議直接使用 Gmail。</span>
</span><span class='line'><span class="c1">## 建議：這部分可以使用 Mandrill 的服務，詳細可參見本文的 Mail Test 說明。</span>
</span><span class='line'><span class="l-Scalar-Plain">DISCOURSE_SMTP_ADDRESS</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">smtp.mandrillapp.com</span>       <span class="c1"># 必填</span>
</span><span class='line'><span class="l-Scalar-Plain">DISCOURSE_SMTP_PORT</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">587</span>                           <span class="c1"># 選填</span>
</span><span class='line'><span class="l-Scalar-Plain">DISCOURSE_SMTP_USER_NAME</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">diz@childish.tw</span>          <span class="c1"># 選填</span>
</span><span class='line'><span class="l-Scalar-Plain">DISCOURSE_SMTP_PASSWORD</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MANDRILL_APP_PASSWORD</span>     <span class="c1"># 選填</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## 這裡是放置你論壇資料的目錄，包括 Database。</span>
</span><span class='line'><span class="c1">## 將 /var/discourse/ 改為你專案的路徑，就是你 git clone 的目錄。這裡是改 /srv/discourse/。</span>
</span><span class='line'><span class="c1">## 建議：可以把原本的 standalone 改成你的設定檔名稱或 hostname，讓以後要架多重論壇時可以方便管理。這裡是改成 diz.childish.tw</span>
</span><span class='line'><span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">volume</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/srv/discourse/shared/diz.childish.tw</span>
</span><span class='line'>      <span class="l-Scalar-Plain">guest</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/shared</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">volume</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/srv/discourse/shared/diz.childish.tw/log/var-log</span>
</span><span class='line'>      <span class="l-Scalar-Plain">guest</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/var/log</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Command</h1>

<p>在你<code>git clone</code>下來的專案根目錄中，有一個檔名為<code>launcher</code>的腳本執行檔，它可以幫助我們快速使用 docker 架設論壇。在該資料夾下，使用<code>./launcger</code>去呼叫。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/srv/discourse <span class="nv">$ </span>./launcher
</span><span class='line'>Usage: launcher COMMAND CONFIG <span class="o">[</span>--skip-prereqs<span class="o">]</span>
</span><span class='line'>Commands:
</span><span class='line'>    start:      Start/initialize a container
</span><span class='line'>    stop:       Stop a running container
</span><span class='line'>    restart:    Restart a container
</span><span class='line'>    destroy:    Stop and remove a container
</span><span class='line'>    enter:      Use nsenter to enter a container
</span><span class='line'>    ssh:        Start a bash shell in a running container
</span><span class='line'>    logs:       Docker logs <span class="k">for</span> container
</span><span class='line'>    mailtest:   Test the mail settings in a container
</span><span class='line'>    bootstrap:  Bootstrap a container <span class="k">for</span> the config based on a template
</span><span class='line'>    rebuild:    Rebuild a container <span class="o">(</span>destroy old, bootstrap, start new<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>    --skip-prereqs   Don<span class="err">&#39;</span>t check prerequisites
</span></code></pre></td></tr></table></div></figure>


<p>它的使用方式就是程式<code>./launcher</code>，接著一個 COMMAND 參數，最後加上你的設定檔名稱（不含<code>.yml</code>）。在接下來的步驟中，會一一提及各 COMMAN 的使用時機。在這裡先知道它的使用方法就好。</p>

<h1>Step3: Mail Test</h1>

<p>在設定檔裡有提到 Mail Server 的設定很重要，這是因為在申請會員時，會寄信請你啟用帳號，否則就無法使用。而這也包括了我們要建立的第一個帳號，管理員帳號。若是這部分設定錯誤，將會導致連管理員帳號都無法登入的窘境。為了讓你知道設定是否正確，這個工具也提供了測試的程式，讓你在建立論壇前，先寄一封信自己，以測試設定是否正常。</p>

<p>在下指令後，他會要求你輸入要寄送的信箱位址，填寫後送出即可。若是有收到信，就代表你的設定是正常的囉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># launcher mailtest &lt;config_name&gt;</span>
</span><span class='line'>/srv/discourse <span class="nv">$ </span>./launcher mailtest childish
</span><span class='line'>Enter your email address: diz@childish.tw
</span><span class='line'>DISCOURSE_SMTP_ settings:
</span><span class='line'> <span class="nv">DISCOURSE_SMTP_PASSWORD</span> <span class="o">=</span> <span class="o">(</span>hidden<span class="o">)</span>
</span><span class='line'> <span class="nv">DISCOURSE_SMTP_USER_NAME</span> <span class="o">=</span> diz@childish.tw
</span><span class='line'> <span class="nv">DISCOURSE_SMTP_ADDRESS</span> <span class="o">=</span> smtp.mandrillapp.com
</span><span class='line'> <span class="nv">DISCOURSE_SMTP_PORT</span> <span class="o">=</span> 587
</span><span class='line'>
</span><span class='line'>You are correctly configured to use: Mandrill
</span><span class='line'>Success!
</span></code></pre></td></tr></table></div></figure>


<p>因為這隻程式會使用到 python 去讀取 yml ，若是你的伺服器環境有缺 <code>python3-yaml</code>這個套件，他會提示你去安裝，按照他給的訊息去安裝缺的套件就可以了。若你的作業系統是 Debian / Ubuntu ，可以下 <code>sudo apt-get install python3-yaml</code> 去安裝。</p>

<h2>Mandrill</h2>

<p>若是你沒有自己的 Mail Server ，可以去申請 <a href="https://mandrill.com/">Mandrill</a> 的服務。它是一個免費的 Mail Server 服務，特別針對網站系統信件的部分。他會提供您去建立多組 SMTP &amp; API Credentials ，讓我們減少泄漏帳號密碼的危險（這也是我不建議直接使用 Gmail的原因，而且還會時常無法連線，讓你收不到確認信，囧）。總之，若沒有自己的 Mail Server ，就去申請吧！</p>

<h1>Step4: Bootstrap</h1>

<p>設定檔編輯好、Mail Servrt 測試後，可以來產生 image 了。這裡使用<code>bootstrap</code>去建立。ˊ這部分會需要花一段時間，取決伺服器的網路速度和效能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># launcher bootstrap &lt;config_name&gt;</span>
</span><span class='line'>/srv/discourse <span class="nv">$ </span>./launcher bootstrap childish
</span><span class='line'>.........
</span></code></pre></td></tr></table></div></figure>


<p>這邊若是遇到無法解析 github.com 的錯誤，可以參考 <a href="http://blog.fntsr.tw/articles/2014/11/08/docker-cant-resolve-github-dot-com/">Docker Can’t Resolve github.com</a> 這篇文章去解決。</p>

<p>產生成功後，可以用<code>docker images</code>做確認。程式會產生以<code>local_discourse/&lt;config_name&gt;</code>格式為命名的 image 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker images
</span><span class='line'>REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>local_discourse/childish   latest              61004de94a0c        <span class="m">22</span> hours ago        1.489 GB
</span></code></pre></td></tr></table></div></figure>


<h1>Step5: Start</h1>

<p>有了 image 後，就使用<code>start</code>來初始化 contianer 吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># launcher start &lt;config_name&gt;</span>
</span><span class='line'>/srv/discourse <span class="nv">$ </span>./launcher start childish
</span><span class='line'>No cid found, creating a new container
</span><span class='line'>Calculated ENV: .............. <span class="c"># Your enveironment setting</span>
</span><span class='line'>945342195fc05cbfa706f3d1875ab6383fbf5d21a73488367908d9ece21e1abd
</span></code></pre></td></tr></table></div></figure>


<p>接著，我們可以使用<code>docker ps</code>做確認。程式會產生以你設定檔名稱命名的 container。若是 STATUS 是顯示 Up 即代表成功了！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/srv/docker/discourse <span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE                             COMMAND       CREATED         STATUS         PORTS                                         NAMES
</span><span class='line'>945342195fc0        local_discourse/childish:latest   <span class="s2">&quot;/sbin/boot&quot;</span>  <span class="m">52</span> seconds ago  Up <span class="m">51</span> seconds  0.0.0.0:2222-&gt;22/tcp, 0.0.0.0:10080-&gt;80/tcp   childish
</span></code></pre></td></tr></table></div></figure>


<h1>Step6: Browse</h1>

<p>最後，您就可以透過你前面坐的設定來瀏覽網站啦。若是在本機可以拜訪 <code>http://localhost</code> ，或是去拜訪該伺服器的 hostname 。若 container 的 port 80 不是對應到 host 的 port 80 ，記得加上 port。</p>

<p>以本範例來說就是拜訪 <code>http://diz.childish.tw:10080</code>。會這樣做設定，是因為我會再透過 nginx 去監聽 10080 port，讓後 bind 到透過 <code>diz.childish.tw</code> 訪問伺服器的連線。當然，這是延伸應用了。</p>

<p>之後，就是 Discourse 相關的操作了，也不在本文的範疇內，按照網站上，官方給的提示去做就行啦。</p>

<p>架設出來大致就如同 <a href="http://diz.childish.tw/">http://diz.childish.tw/</a>。希望大家都能架設成功囉！</p>

<h1>後話</h1>

<p>這是第一篇 Docker 實例應用的教學文，推廣性質還是比較重，主要還是讓讀者能夠跟著步驟，透過 Docker 將論壇建立起來。之後會想再寫一篇延伸，大概是關於使用 <code>launcher</code> 的其他管理，以及如何備份資料以及搬遷，展現使用 Docker 的靈活性。還請大家期待囉。</p>

<h1>Reference</h1>

<ul>
<li><a href="http://www.discourse.org/">Discourse</a></li>
<li><a href="https://github.com/discourse/discourse_docker">discourse/discourse_docker</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-14-04">How To Install Discourse on Ubuntu 14.04</a></li>
<li><a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-digital-ocean.md">discourse / docs / INSTALL-digital-ocean.md</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Docker Data Volume on OS X]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/10/31/use-docker-data-volume-on-os-x/"/>
    <updated>2014-10-31T22:05:15+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/10/31/use-docker-data-volume-on-os-x</id>
    <content type="html"><![CDATA[<h2>在 OS X 上，透過 boot2docker 使用 docker 的 data volume</h2>

<p>Docker 1.3 在 2014-10-16 釋出。其中，在方便性上最讓人注目的更新，除了 exec 指令以外，就是 boot2docker 在 Mac OS X 資料夾分享功能的改進，本文主要是針對後者去做講述。</p>

<!-- more -->


<h1>前言</h1>

<p>由於 Docker 只支持 Linux 作業系統，倘若要於 OS X 使用 Docker ，會使用 boot2docker 這個工具，在 VirtualBox 上建立一個 boot2docker-vm 的映像檔。然後，透過這個 Linux VM 去操作 Docker。</p>

<p>但是，在 Docker 1.3 之前，因為 boot2docker 的映像檔沒有支援 VirtualBox Guest Additions ，所以無法使用 Virtualbox 分享資料夾的功能，將 OS X 的資料夾掛載到虛擬機器裡。因此必須另外自行製作有支援該 VirtualBox Guest Additions 的映像檔（或是下載別人做好的），然後設定 Virtual Box ，把 OS X 的資料夾自動掛載到虛擬機器裡。</p>

<p>不過，隨著 Docker 1.3 釋出，boot2docker 也一併將這個功能引入。使用者可以直接透過 boot2docker 的映像檔使用這功能，而且它會自動把 <code>/Users</code> 資料夾掛載到虛擬機器裡，不需要另外設定！</p>

<p>下圖是在 OS X 上，使用 boot2docker 建立 data volume 的示意圖，希望能幫助各位了解運作原理。</p>

<p><a href="http://blog.fntsr.tw/images/posts/2014-10-31-use-docker-data-volume-on-os-x-001.png"><img src="http://blog.fntsr.tw/images/posts/2014-10-31-use-docker-data-volume-on-os-x-001.png" width="512" height="384"></a></p>

<h1>前置作業</h1>

<p>在開始前，必須先安裝或更新 docker 和 boot2docker 到 1.30 以上的版本，更新的方法在我前一篇文章 <a href="http://blog.fntsr.tw/articles/2014/10/31/upgrade-docker-and-boot2docker-on-os-x/">Upgrade Docker and Boot2docker on OS X</a> 已經說明了，可以參考看看，這邊就不多贅述。</p>

<p>接著在 Terminal 下 <code>$ boot2docker ssh 'ls -al /Users'</code> 的指令，確認是否已經成功掛載。如果成功，應該會出現 <code>/Users</code> 的目錄。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>boot2docker ssh <span class="s1">&#39;ls -al /Users&#39;</span>
</span><span class='line'>drwxr-xr-x    <span class="m">1</span> docker   staff          <span class="m">204</span> Mar <span class="m">29</span>  <span class="m">2014</span> .
</span><span class='line'>drwxr-xr-x   <span class="m">17</span> root     root           <span class="m">400</span> Oct <span class="m">31</span> 10:29 ..
</span><span class='line'>-rw-r--r--    <span class="m">1</span> docker   staff            <span class="m">0</span> Aug <span class="m">25</span>  <span class="m">2013</span> .localized
</span><span class='line'>drwxrwxrwx    <span class="m">1</span> docker   staff          <span class="m">306</span> Oct <span class="m">18</span> 04:08 Shared
</span><span class='line'>drwxr-xr-x    <span class="m">1</span> docker   staff         <span class="m">3774</span> Oct <span class="m">31</span> 17:52 user5566
</span></code></pre></td></tr></table></div></figure>


<h1>Data Volume</h1>

<p>本文利用 ubuntu 的 images 去做建立 data volume 的示範。開始前，再次強調，因為 boot2docker 只有把 OS X 的 <code>/Users</code> 資料夾掛載到虛擬機上，所以 data volume 的 host 資料夾必須在 <code>/Users</code> 底下。</p>

<h3>首先</h3>

<p>把想建立 data volume 的資料夾與檔案準備好。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ~/docker-volume/test
</span><span class='line'><span class="nv">$ </span>touch ~/docker-volume/test/volume-test.md
</span><span class='line'><span class="nv">$ </span>ls -al ~/docker-volume/test
</span><span class='line'>total 0
</span><span class='line'>drwxr-xr-x  <span class="m">3</span> user5566  staff  <span class="m">102</span> <span class="m">11</span>  <span class="m">1</span> 02:01 .
</span><span class='line'>drwxr-xr-x  <span class="m">3</span> user5566  staff  <span class="m">102</span> <span class="m">11</span>  <span class="m">1</span> 02:01 ..
</span><span class='line'>-rw-r--r--  <span class="m">1</span> user5566  staff    <span class="m">0</span> <span class="m">11</span>  <span class="m">1</span> 02:01 volume-test.md
</span></code></pre></td></tr></table></div></figure>


<h3>接著</h3>

<p>建立一個 Container 。</p>

<p>並且，將剛才建立的資料夾，透過 data volume 掛載到 <code>/volume_test</code> 的位置。並且確認是否成功。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 建立 Container</span>
</span><span class='line'><span class="nv">$ </span>docker run -it -v ~/docker-volume/test:/volume_test ubuntu:latest /bin/bash
</span><span class='line'>root@d0d097097657:/#
</span><span class='line'>
</span><span class='line'><span class="c"># 測試 data volume 是否成功</span>
</span><span class='line'>root@d0d097097657:/# ls -al /volume_test/
</span><span class='line'>total 4
</span><span class='line'>drwxr-xr-x  <span class="m">1</span> <span class="m">1000</span> staff  <span class="m">102</span> Oct <span class="m">31</span>  <span class="m">2014</span> ./
</span><span class='line'>drwxr-xr-x <span class="m">50</span> root root  <span class="m">4096</span> Oct <span class="m">31</span> 17:51 ../
</span><span class='line'>-rw-r--r--  <span class="m">1</span> <span class="m">1000</span> staff    <span class="m">0</span> Oct <span class="m">31</span>  <span class="m">2014</span> volume-test.md
</span></code></pre></td></tr></table></div></figure>


<h3>最後</h3>

<p>在 OS X 和 Container 中，都建立一個檔案，以測試同步與否。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># OS X</span>
</span><span class='line'><span class="nv">$ </span>touch ~/docker-volume/test/file-from-osx.md
</span><span class='line'>
</span><span class='line'><span class="c"># Container</span>
</span><span class='line'>root@d0d097097657:/# touch /volume_test/file-from-container.md
</span></code></pre></td></tr></table></div></figure>


<p>看起來是成功了，歡呼囉！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># OS X 確認</span>
</span><span class='line'><span class="nv">$ </span>ls -al ~/docker-volume/test
</span><span class='line'>total 0
</span><span class='line'>drwxr-xr-x  <span class="m">5</span> user5566  staff   170B <span class="m">11</span>  <span class="m">1</span> 02:12 .
</span><span class='line'>drwxr-xr-x  <span class="m">3</span> user5566  staff   102B <span class="m">11</span>  <span class="m">1</span> 02:01 ..
</span><span class='line'>-rw-r--r--  <span class="m">1</span> user5566  staff     0B <span class="m">11</span>  <span class="m">1</span> 01:58 file-from-container.md
</span><span class='line'>-rw-r--r--  <span class="m">1</span> user5566  staff     0B <span class="m">11</span>  <span class="m">1</span> 02:12 file-from-osx.md
</span><span class='line'>-rw-r--r--  <span class="m">1</span> user5566  staff     0B <span class="m">11</span>  <span class="m">1</span> 02:01 volume-test.md
</span><span class='line'>
</span><span class='line'><span class="c"># Container 確認</span>
</span><span class='line'>root@d0d097097657:/# ls -al /volume_test/
</span><span class='line'>total 4
</span><span class='line'>drwxr-xr-x  <span class="m">1</span> <span class="m">1000</span> staff  <span class="m">170</span> Oct <span class="m">31</span>  <span class="m">2014</span> .
</span><span class='line'>drwxr-xr-x <span class="m">50</span> root root  <span class="m">4096</span> Oct <span class="m">31</span> 17:51 ..
</span><span class='line'>-rw-r--r--  <span class="m">1</span> <span class="m">1000</span> staff    <span class="m">0</span> Oct <span class="m">31</span> 17:58 file-from-container.md
</span><span class='line'>-rw-r--r--  <span class="m">1</span> <span class="m">1000</span> staff    <span class="m">0</span> Oct <span class="m">31</span>  <span class="m">2014</span> file-from-osx.md
</span><span class='line'>-rw-r--r--  <span class="m">1</span> <span class="m">1000</span> staff    <span class="m">0</span> Oct <span class="m">31</span>  <span class="m">2014</span> volume-test.md
</span></code></pre></td></tr></table></div></figure>


<h1>後記</h1>

<p>Data Volume 是 docker 在應用 LXC 時，一個非常重要的功能。在初學 Docker 前，因為不懂 boot2docker 的運作原理，在這功能鬼打牆好多次，都無法成功。後來知道原理後，卻覺得在 OS X 實作這功能太麻煩了，改用 VPS 直接用 Linux 去玩 Docker 。還好，現在 boot2docker 已經做好這件事了，讓我們可以更快樂的在 OS X 上面玩 Docker ，尤其是進行開發啦！(rock)</p>

<p>剛好，這塊是我在 <a href="http://blog.fntsr.tw/articles/2014/10/18/how-to-deploy-php-projects-with-docker/">PHPConf 演講</a> 裡，只有稍微帶過的部分，希望這篇文章能補足當時因為時間關係，而沒講明的部分。在之後，我也會把握空閒時間，多寫幾篇有關 Docker 的文章，補足演講的缺口，希望大家會喜歡。 =D</p>

<p>最後，祝各位在 OS X 上，愜意地 Docker 囉！</p>

<h1>Reference</h1>

<ul>
<li><a href="https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c">boot2docker together with VirtualBox Guest Additions: How to mount /Users into boot2docker</a></li>
<li><a href="https://docs.docker.com/userguide/dockervolumes/">Managing Data in Containers</a></li>
<li><a href="https://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/">DOCKER 1.3: SIGNED IMAGES, PROCESS INJECTION, SECURITY OPTIONS, MAC SHARED DIRECTORIES</a></li>
<li><a href="https://github.com/boot2docker/boot2docker">boot2docker/boot2docker</a></li>
<li><a href="https://github.com/boot2docker/boot2docker/issues/282#issuecomment-44601104">Volumes: vboxguest + vboxsf modules #282</a></li>
<li><a href="https://www.facebook.com/groups/docker.taipei/permalink/1522080854693939/">Post of Docker.Taipei</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade Docker and Boot2docker on OS X]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/10/31/upgrade-docker-and-boot2docker-on-os-x/"/>
    <updated>2014-10-31T17:59:58+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/10/31/upgrade-docker-and-boot2docker-on-os-x</id>
    <content type="html"><![CDATA[<h2>在 OS X 更新 Docker 和 Boot2docker</h2>

<p>在 OS X 安裝 Docker 和 Boot2docker 有兩種方式，一種是下載 *.pkg 進行安裝，一種是使用 homebrew 進行安裝。本文前面會描述兩者更新的方式，然後說明如何把 Boot2docker 的 VM Image 更新，也就是把 Docker Server 更新到新版。</p>

<!-- more -->


<h2>Step1: Turn Off Boot2docker</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>boot2docker stop
</span></code></pre></td></tr></table></div></figure>


<h2>Step2: Upgrade Boot2docker</h2>

<p>依照您安裝 boot2docker 的方式進行更新</p>

<h4>Homebrew</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'><span class="nv">$ </span>brew upgrade docker
</span><span class='line'><span class="nv">$ </span>brew upgrade boot2docker
</span></code></pre></td></tr></table></div></figure>


<h4>Packge Installer</h4>

<ol>
<li>到 <a href="https://github.com/boot2docker/osx-installer/releases">boot2docker/osx-installer</a> 下載最新版本的安裝檔。</li>
<li>點擊安裝檔進行安裝。</li>
</ol>


<h2>Step3: Upgrade Boot2docker Image</h2>

<p>按照「正常程序」升級映像檔即可。</p>

<p>官網是說如果你是 <code>0.11.1-pre1</code> 之前的版本，建議刪除原有映像檔，但是這已經是很早之前的版本了。所以除非有什麼無法升級的意外，才需要「刪除原有映像檔」的方式更新。</p>

<h4>正常程序</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>boot2docker stop
</span><span class='line'><span class="nv">$ </span>boot2docker download
</span><span class='line'><span class="nv">$ </span>boot2docker up
</span></code></pre></td></tr></table></div></figure>


<h4>刪除原有映像檔</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>boot2docker stop
</span><span class='line'><span class="nv">$ </span>boot2docker delete     // 注意：本指令會刪除現有的VM映像檔
</span><span class='line'><span class="nv">$ </span>boot2docker download
</span><span class='line'><span class="nv">$ </span>boot2docker init
</span><span class='line'><span class="nv">$ </span>boot2docker up
</span></code></pre></td></tr></table></div></figure>


<h2>Step4: Check Version</h2>

<p>確認你的版本是否都為最新版了。寫本文時最新版是1.3.0。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>boot2docker version
</span><span class='line'>Boot2Docker-cli version: v1.3.0
</span><span class='line'>Git commit: deafc19
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker version
</span><span class='line'>Client version: 1.3.0
</span><span class='line'>Client API version: 1.15
</span><span class='line'>Go version <span class="o">(</span>client<span class="o">)</span>: go1.3.3
</span><span class='line'>Git commit <span class="o">(</span>client<span class="o">)</span>: c78088f
</span><span class='line'>OS/Arch <span class="o">(</span>client<span class="o">)</span>: darwin/amd64
</span><span class='line'>Server version: 1.3.1
</span><span class='line'>Server API version: 1.15
</span><span class='line'>Go version <span class="o">(</span>server<span class="o">)</span>: go1.3.3
</span><span class='line'>Git commit <span class="o">(</span>server<span class="o">)</span>: 4e9bbfa
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ol>
<li><a href="http://docs.docker.com/installation/mac/#upgrading">Installing Docker on Mac OS X #Upgrading</a></li>
<li><a href="http://blog.javabien.net/2014/03/17/upgrade-docker-and-boot2docker-on-osx/">UPGRADE DOCKER AND BOOT2DOCKER ON OSX</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenge of Interdisciplinary Learning]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/10/31/challenge-of-interdisciplinary-learning/"/>
    <updated>2014-10-31T15:29:55+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/10/31/challenge-of-interdisciplinary-learning</id>
    <content type="html"><![CDATA[<h2>跨領域學習的挑戰</h2>

<p>十月結束了，開學已有三旬半月，<br/>
第一次感受到自己對新生活上，調試得極度不適應。<br/></p>

<p>研究生生活。<br/></p>

<!-- more -->


<h3>困境</h3>

<p>從歷史系跳到資工系軟工所，仍有一個很大的鴻溝，<br/>
儘管我名義上已經踏入了，但是學識上仍浮載浮沈。<br/>
或許，是我之前太過於樂觀，以為自己實作的經驗能替我克服，<br/>
深刻體驗後，卻深深感受到許多沮喪與挫折。<br/></p>

<p>在理論上，我是有太多不足需要補齊。<br/>
尤其是數學面向，一向是我的罩門，此時更倍感艱辛，<br/>
面對應用密碼學和各演算法，我感到被高牆籠罩的壓迫。<br/></p>

<p>在報 Paper 這件事，也是重重打擊了自己，<br/>
原本以為在時間內能完成，隨著時間逼近，越是慌亂。<br/>
還好，可能是因為第一次報論文，才沒被盯到牆上。<br/>
但是這種上台充滿著焦慮與沒信心的感受，<br/>
卻也讓我感到丟臉與沮喪，和之前在PHPConf的感受大相徑庭。<br/></p>

<p>這些日子以來，讓我缺乏時間管理的弱點，暴露得更明顯。<br/>
做事喜歡隨心而起的個性，也讓我每件事都有做，卻都做不好。<br/>
一直在事情沒做完與做不好的恐懼下度過。<br/></p>

<p>我是知道會這樣的，<br/>
只是真的在這些事發生時，才發現自己根本心理建設不夠。<br/></p>

<h3>別日</h3>

<p>我很懷念以前在歷史系時，<br/>
偶爾讀讀歷史，然後自由時間都玩資訊的時光，<br/>
儘管不用太認真上課，卻也能夠遊刃有餘的Pass每科考試。<br/>
（儘管分數不高，但讀考試時卻也很開心）<br/></p>

<p>但我已經無法再用這種態度面對自己現在的生活了，<br/>
其實這也是理所當然的。<br/></p>

<p>我好想繼續鑽研自己喜歡的技術，去實作自己想做的作品，<br/>
但是我現在讓自己走了這條路，這些事已經不能當作主要目標，<br/>
心裡充滿了許多矛盾。<br/></p>

<p>有太多事情無法再用過去的生活方式去面對，<br/>
我也沒有太多時間埋手在過去的時光，<br/>
而必須認真思考，思考我該怎麼做，怎麼改變。<br/></p>

<h3>面對</h3>

<p>研究生生活兩年，其實不長，<br/>
卻也是能讓人洗髓、脫胎換骨。<br/></p>

<p>我可以選擇繼續逃避，整日在惶恐或焦慮中度過，<br/>
然後兩年後勉強頂一個碩士頭銜，卻不一定名副其實。<br/></p>

<p>那我幹麻浪費兩年時間讀研究所？愚蠢至極。<br/></p>

<p>我要做的事情就是面對，<br/>
去想辦法，去調試，去做規劃，去取捨。<br/></p>

<p>這條路是我選的，就是要去充實原本自己不熟的理論層面，<br/>
都知道是不熟的，會遇到困境是正常的，會挫折和沮喪也是，<br/>
但是，不應該被這些負面情緒佔據太久。<br/></p>

<p>我會嘗試去面對與克服，去改變。<br/>
期許自己，兩年後，能夠滿意自己這兩年的努力與進步。<br/></p>

<p>2014-10-31，寫於聖誕節之時，若虛。<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Deploy PHP Projects With Docker]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/10/18/how-to-deploy-php-projects-with-docker/"/>
    <updated>2014-10-18T17:00:00+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/10/18/how-to-deploy-php-projects-with-docker</id>
    <content type="html"><![CDATA[<p>本簡報是為PHPConf2014議程所準備的，但陸續會在針對簡報做維護，並且在這邊回答會眾對於當天大會聽講但是沒有聽懂的部分。</p>

<ul>
<li>影片： (請耐心等候主辦單位釋出)</li>
<li>簡報： <a href="https://speakerdeck.com/fntsrlike/how-to-deploy-php-projects-with-docker">SpeakerDeck</a> | <a href="http://www.slideshare.net/ruoshiling/how-to-deploy-php-projects-with-docker">SlideShare</a></li>
</ul>


<div style="width:400px;">
<script async class="speakerdeck-embed" data-id="4be222a03e440132e5ed2a2ba31f9bce" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
</div>


<!-- more -->


<h2>Updated Log</h2>

<h3>2014-10-25 Sat. | v2.1</h3>

<ul>
<li>因為SpeakDeck原本的項目一直無法轉檔成功，於是另外再開一個項目重新上傳，網址不變。</li>
</ul>


<h3>2014-10-24 Fri. | v2</h3>

<ul>
<li>修正演講時發現的小錯。</li>
<li>補上缺少的Expose Port的投影片。</li>
</ul>


<h2>Feedback</h2>

<ul>
<li>講起來太快，很像在趕行程。</li>
<li>實戰經驗說的不足。缺少了運用在正式伺服器上面的相關實作經驗</li>
<li>缺少實務面 Scalability in Mind</li>
<li>講者還只是學生沒有真正在軟體業待過，對軟體公司複數伺服器的自動化部署應該是完全沒有概念。</li>
<li>AUFS的理解也不太正確。</li>
<li>LXC是Docker 0.38的限制，Docker 1.0已經開發了自己的container lib而不再以linux container為預設值。</li>
</ul>


<h2>Q &amp; A</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[24 Years Old]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/10/16/24y-old/"/>
    <updated>2014-10-16T23:59:34+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/10/16/24y-old</id>
    <content type="html"><![CDATA[<h2>二十四歲生日</h2>

<p>今天是我二十四歲生日。 （噢不，個資外洩了）</p>

<p>今年生日算是過得比較清淡的吧！一來是到了一個新環境了，暫時與熟識的人分開了，比較不會有些瘋狂的慶生行為。二來自己最近也在忙著準備10/18禮拜六的演講，不斷利用閑餘時間修簡報，所以就算有人想幫我慶生大概也找不到我的人（炸）。嘛，清淡歸清淡，但因為網路發達，還是有許多人留了祝賀的言語，也是挺溫暖的。</p>

<p>二十四歲這一年是研究所的開端，到二十五歲，是我人生中難得有時間可以全心精儘自己的時候。希望在明年過生日時，能明顯看到自己的成長。去PHPConf演講，或許就是我強迫自己要成長的第一步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2]]></title>
    <link href="http://blog.fntsr.tw/articles/2013/12/15/sublime-text-2/"/>
    <updated>2013-12-15T15:03:12+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2013/12/15/sublime-text-2</id>
    <content type="html"><![CDATA[<h2>Sublime Text 2</h2>

<p>ST2是我在Programming時必備的編輯器（Editor），從原本使用Notepad++跳槽到ST2，變回不去了，更遑論筆電換成Mac後，更是確定使用ST2作為我的開發利器（雖然也不是不會使用神器Vim，但是很多快捷鍵還不熟，通常只有在連線到server才會用ＸＤ）。而在處理MBA2013年中升級到OS X 10.9的續航問題而嘗試重新安裝OS後，便利用這機會，把我有關ST2的相關設定作為筆記寫成這篇文章囉。</p>

<h2>為什麼使用ST2</h2>

<h3>我的理由：</h3>

<ul>
<li><strong>跨平台。</strong>Linux, OS X, Windows皆有支援。</li>
<li><strong>配色佳。</strong>尤愛預設的Monokai Color Scheme，深底色會讓眼睛舒適。</li>
<li><strong>套件多。</strong>豐富的套件與簡單好用的套件管理器，讓我簡單擴充我想要的功能。</li>
<li><strong>自訂強。</strong>非常彈性與強大的自訂設定，讓我打造屬於自己的編輯器。</li>
</ul>


<h3>ST設計原則：</h3>

<ul>
<li>專注在文字與程式碼上，而不是讓人眼花撩亂的工具列；</li>
<li>對話框訊息不使用晦澀難懂的文字；</li>
<li>善用螢幕的每個空間，使全螢幕、多螢幕模式一起編輯檔案，儘可能很容易</li>
</ul>


<!-- more -->


<h2>下載</h2>

<p>下載頁面：<a href="http://www.sublimetext.com/2">http://www.sublimetext.com/2</a>
因為ST3在此時還在Beta，有些套件可能仍還未升級到可以支援ST3，所以本人還是繼續使用ST2。</p>

<h2>套件（Packages）</h2>

<h3>安裝套件管理器</h3>

<p>Ctrl + ` 呼叫 Console（控制台），然後輸入以下Script（腳本），並且送出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">,</span><span class="nn">os</span><span class="p">;</span> <span class="n">pf</span><span class="o">=</span><span class="s">&#39;Package Control.sublime-package&#39;</span><span class="p">;</span> <span class="n">ipp</span><span class="o">=</span><span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">();</span> <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span><span class="p">;</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">()));</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ipp</span><span class="p">,</span><span class="n">pf</span><span class="p">),</span><span class="s">&#39;wb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;http://sublime.wbond.net/&#39;</span><span class="o">+</span><span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span><span class="s">&#39;%20&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">());</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Please restart Sublime Text to finish installation&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此一來就可以使用套件管理器了！</p>

<h3>使用套件管理器</h3>

<p>使用command + shift + p 呼叫 Command Palette （命令調色盤）
然後你可以使用下列指令來做套件管理：
- Package Control: Install Package
- Package Control: Litst Package
- Package Control: Remove Package</p>

<p><em>（Command Palette的搜尋是只要輸入目標擁有的關鍵字即可搜尋到，所以通常我們只輸入後方的單字）</em>
<em>（還有其他指令可輸入Package Control 查詢）</em></p>

<p><em>（以下套件名稱都是可以點擊的超連結，會連結該套件在Package Control的對應頁面。）</em>
<em>（有些套件不是安裝就能使用，或是需要透過按鍵觸發，建議安裝前都閱讀一下他們自己的頁面哦。）</em></p>

<h3>推薦套件</h3>

<ul>
<li><a href="https://sublime.wbond.net/packages/Package%20Control">Package Control</a> - 就是上面安裝的套件管理器。</li>
<li><a href="https://sublime.wbond.net/packages/AdvancedNewFile">AdvancedNewFile</a> - 在指定路徑新增檔案。</li>
<li><a href="https://sublime.wbond.net/packages/Alignment">Alignment</a> - 讓程式碼能多行將&#8217;=&lsquo;或自定義符號對齊的套件。</li>
<li><a href="https://sublime.wbond.net/packages/BracketHighlighter">BracketHighlighter</a> - 將括號高亮顯示。</li>
<li><a href="https://sublime.wbond.net/packages/ConvertToUTF8">ConvertToUTF8</a> - 解決中文顯示亂碼的問題（將Big5, GBK轉為UTF8讓編輯器顯示）</li>
<li><a href="https://sublime.wbond.net/packages/Color%20Highlighter">ColorHighlighter</a> - 當的游標移至文字中如顏色相關的色碼會自動顯示對應的顏色。</li>
<li><a href="https://sublime.wbond.net/packages/ColorPicker">ColorPicker</a> - 呼叫調色盤，讓你直接用選的來選顏色。</li>
<li><a href="https://sublime.wbond.net/packages/Emmet">Emmet</a> - 原Zend Coding，能加速程式開發的神器，詳細使用方法請見官方文件。</li>
<li><a href="https://sublime.wbond.net/search/LiveReload">LiveReload</a> - 此套件搭配對應瀏覽器擴充，可以讓你儲存檔案時，自動重新整理網頁。</li>
<li><a href="https://sublime.wbond.net/packages/SFTP">SFTP</a> - 能夠讓你使用SFTP/FTP的方式，直接用本機的ST去修改檔案並且儲存。對於Vim苦手可說是必備套件！</li>
<li><a href="https://sublime.wbond.net/packages/SideBarEnhancements">SideBarEnhancements</a> - Enhancements to Sublime Text sidebar. Files and folders.</li>
<li><a href="https://sublime.wbond.net/packages/SublimeLinter">SublimeLinter</a> - 能用高亮提示使用者程式碼中，不是規範內或錯誤的寫法。</li>
<li><a href="https://sublime.wbond.net/packages/SublimeCodeIntel">SublimeCodeIntel</a> - 多數語言的程式碼提示與追蹤。</li>
</ul>


<h3>選用套件</h3>

<ul>
<li><a href="https://sublime.wbond.net/packages/Console%20API%20Snippets%20(JavaScript">Console API Snippets (JavaScript)</a>) - JavaScript Console API Snippets for Sublime Text</li>
<li><a href="https://sublime.wbond.net/packages/CSS%20Less(ish">CSS Less(ish)</a>) - 讓你用註解的方式，在CSS達到LESS用變數、嵌套的功能。</li>
<li><a href="https://sublime.wbond.net/packages/DocBlockr">DocBlockr</a> - 自動完成PHP, JS, CoffeeScript, ActionScript, C, C++的DocBlock註解。</li>
<li><a href="https://sublime.wbond.net/packages/Git">Git</a> - 能在ST下使用Git指令，免於在ST和Terminal間頻繁地切換。</li>
<li><a href="https://sublime.wbond.net/packages/HTML5">HTML5</a> - HTML5程式碼高亮與自動完成。</li>
<li><a href="https://sublime.wbond.net/packages/jQuery">jQuery</a> - jQuery程式碼高亮與自動完成。</li>
<li><a href="https://sublime.wbond.net/packages/JsFormat">JsFormat</a> - 幫你格式化JavaScript排版，尤其使用在壓縮過的js檔上。</li>
<li><a href="https://sublime.wbond.net/packages/LESS">LESS</a> - LESS程式碼高亮</li>
<li><a href="https://sublime.wbond.net/packages/Prefixr">Prefixr</a> - 能透過Prefixr API協助處理CSS跨瀏覽器的相容問題。</li>
<li><a href="https://sublime.wbond.net/packages/Sass">Sass</a> - SASS程式碼高亮與自動完成。</li>
<li><a href="https://sublime.wbond.net/packages/SCSS">SCSS</a> - SCSS程式碼高亮與自動完成。</li>
<li><a href="https://sublime.wbond.net/packages/Tag">Tag</a> - 重新格式化HTML/XML的排版。適合用在外來的dirty code。</li>
</ul>


<h2>自定義設定檔</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;font_size&quot;</span><span class="p">:</span> <span class="mf">14.0</span><span class="p">,</span>   <span class="err">//</span> <span class="err">字體大小</span>
</span><span class='line'>    <span class="nt">&quot;rulers&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">120</span><span class="p">],</span>     <span class="err">//</span> <span class="err">邊線寬度</span>
</span><span class='line'>    <span class="nt">&quot;wrap_width&quot;</span><span class="p">:</span> <span class="mi">120</span><span class="p">,</span>   <span class="err">//</span> <span class="err">邊界寬度</span>
</span><span class='line'>    <span class="nt">&quot;tab_size&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>       <span class="err">//</span> <span class="err">tab寬度</span>
</span><span class='line'>    <span class="nt">&quot;spell_check&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="err">//</span> <span class="err">拼音檢查</span>
</span><span class='line'>    <span class="nt">&quot;translate_tabs_to_spaces&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>          <span class="err">//</span> <span class="err">tab轉成空白</span>
</span><span class='line'>    <span class="nt">&quot;trim_trailing_white_space_on_save&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="err">//</span> <span class="err">存檔時將句子後面多餘的空白清除</span>
</span><span class='line'>    <span class="nt">&quot;highlight_line&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>        <span class="err">//</span> <span class="err">高亮當前行</span>
</span><span class='line'>    <span class="nt">&quot;match_brackets_angle&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>  <span class="err">//</span> <span class="err">顯示對應的尖型括號</span> <span class="nt">&quot;&lt;&gt;&quot;</span>
</span><span class='line'>    <span class="s2">&quot;save_on_focus_lost&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>        <span class="err">//</span> <span class="err">當不再專注當前文件時，自動存檔</span>
</span><span class='line'>    <span class="nt">&quot;ignored_packages&quot;</span><span class="p">:[</span><span class="s2">&quot;Vintage&quot;</span><span class="p">]</span> <span class="err">//</span> <span class="err">忽略套件</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>參考資料</h2>

<ul>
<li><a href="http://docs.sublimetext.tw/">Sublime Text 手冊</a></li>
<li><a href="https://sublime.wbond.net/">Package Control</a></li>
<li><a href="http://blog.kkbruce.net/2012/12/useful-sublime-text-2-package-list.html#.Uq1ewGQW1B8">KingKong Bruce記事 - 實用SUBLIME TEXT 2套件整理(2012/12)</a></li>
<li><a href="http://www.cnblogs.com/lhb25/archive/2013/05/02/sublimelinter-for-js-css-coding.html">梦想天空 - 借助 SublimeLinter 编写高质量的 JavaScript &amp; CSS 代码</a></li>
<li><a href="http://kevintsengtw.blogspot.tw/2012/03/sublime-text-2-part5-alignmentcode.html#.Uq1lu2QW1B8">mrkt 的程式學習筆記 - Sublime Text 2 - 好用的前端程式編輯器 Part.5 使用Alignment對齊你的Code</a></li>
<li><a href="http://ihower.tw/blog/archives/7375">ihower {blogging} - Sublime Text 資源整理</a></li>
<li><a href="http://eugg.blogspot.tw/2013/05/sublime-text-2-livereload-plug-in.html">{euSpark*} U閃亮 - [開發筆記] 幫你的 Sublime Text 2安裝 LiveReload Plug-in</a></li>
<li><a href="http://rritw.com/a/JAVAbiancheng/ANT/20120910/220800.html">Sublime Text初始設置</a></li>
</ul>


<p><em>&lt;陸續更新中></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[國立中央大學軟體工程研究所推甄心得]]></title>
    <link href="http://blog.fntsr.tw/articles/2013/12/04/NCUSE-recommendation-expeprience/"/>
    <updated>2013-12-04T16:37:45+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2013/12/04/NCUSE-recommendation-expeprience</id>
    <content type="html"><![CDATA[<h2>國立中央大學軟體工程研究所推甄心得</h2>

<p>本文採用CC授權 姓名標示─非商業性─禁止改作 3.0 台灣  <a href="http://goo.gl/TwbVOk">http://goo.gl/TwbVOk</a></p>

<h3>Introduction</h3>

<p>國立中央大學軟體工程研究所（簡稱軟工所）今年第一次嘗試以上機考為主的推甄方式，且不看重課業成績，這不但意味這造福原本是資工系會Programming但課業成績不佳的同學，更為大學讀非本科系卻對資訊有濃厚興趣的學生開拓的一條路，敝人就是此次考試的受惠者，因為要感謝的人太多，所以只好藉由發心得文給未來想參加此考試的同學參考，作為回報。</p>

<p>關於本次考試說明可以參考：</p>

<ul>
<li>COSCUP 2013 Lighting Talk: <a href="http://goo.gl/Rn44Xj">http://goo.gl/Rn44Xj</a></li>
<li>軟工所粉絲專頁： <a href="http://goo.gl/JqdHdb">http://goo.gl/JqdHdb</a></li>
</ul>


<p>強者的心得文參考：</p>

<ul>
<li>Pioneerlike：<a href="http://goo.gl/mKmqbb">http://goo.gl/mKmqbb</a> （#1IcBND8r (graduate) @ PTT ）</li>
<li>0w0：<a href="http://goo.gl/Oq7D34">http://goo.gl/Oq7D34</a></li>
</ul>


<p>以上強者有敘述過的部分我就儘量不重複了，他們心得寫的很好，已經不需重新闡述，所以我會著重在從實務經驗較多的同學的角度去做心得分享。</p>

<!-- more -->


<h3>About Me</h3>

<ul>
<li>國立中興大學歷史系，系排85.5%，無輔系雙主修，修過資工系幾堂課。</li>
<li>國立文華高中 中區資訊能力競賽(無得名) / BBS校站NF創站長 / 電研社社長 *</li>
<li>國立中興大學 學生會資訊長 / 圖書館網頁工讀生</li>
<li><p>2013全國⼤大專校院開放軟體創作競賽 佳作 / Indie Speed Run 2013 / g0v.tw hackath5n</p></li>
<li><p>報考 40 名，取 11 名，正取10</p></li>
</ul>


<h3>Who is Object?</h3>

<p>正如pioneerlike（後簡稱p9e）所言：『「只寫過網站」的同學不太適合參加本次推甄』，但不必沮喪，這不代表這類人要放棄參加推甄，反而要利用這項經驗去發展。像是敝人就是偏向網站開發的類型，與P大比起來，敝人在程式競賽(ACM-like)的經驗是比較缺乏的，比較常觸碰的是專案開發與維護的部分，也算是比較偏向網站開發的同學，但仰賴高中維護過BBS站（Maple-Itoc，純C寫成）與簡單的資訊競賽的經驗，對於C語言有所了解，但和競賽比起來，走的是不太一樣的方向。</p>

<p>也就是說，你不一定需要透過ACM、CPE等資訊競賽的路線，只要是對專案開發有興趣的同學，可以嘗試用C、C++、Java等，開發一項專案，去了解軟體程式設計和網頁程式
設計的不同，以及其中的思考邏輯，會對你幫助很大。比起一般人，你們擁有網頁開發的基礎，要跳入這塊應該是比較容易的。</p>

<h3>The First Stage</h3>

<p>正如p9e和0w0所說，成績在這個階段不是重點。他們系排都在50%左右，而敝人甚至是非相關科系的，備審資料要求填寫的科目分數，一概沒有修過，但這階段的分數仍然有8X，可以做在校成績所占比重不高的最大驗證。</p>

<p>和p9e不同的，我想強調這階段的重點是代表作。</p>

<p>雖然敝人在高中曾在校內資訊競賽拿到第一名，但到了中區後仍然慘當炮灰。在大學時也未曾參加過CPE，所以我認為CPE應該不是唯一重點。而我走的正是另一條路，我寫過許多小作品，雖然不是很強大，但至少都是一個可以獨立運作的（網頁）程式，且都附在備審資料中。</p>

<p>而為了這次推甄，我把以前的思考已久的想法用網頁程式實作出來，當作代表作與備審資料共同交出去。而在第二階段考試開始前，考試老師也說他們有請研究生幫忙把每個報考生的作品試跑過，看能不能正常運作。所以我想只要寫個能正常運作的作品，附上安裝或使用說明，這階段的分數都能有80上下。</p>

<p>複習並總結一下，因為本次推甄的重點是上機考，所以這階段是不會刷掉任何人，只有分數的差異（大概10~15分），如果你有上傳能正常運作的代表作，分數應該都會有不錯的表現。</p>

<h3>The Second Stage</h3>

<p>今年上機考考了七題，題型說明，p9e和0w0都說得差不多了，我一樣儘量不重複他們所說過的部分。想要了解詳細的同學，可參考p9e的心得，他寫的很清楚。</p>

<p>而我把它分為四題簡單題（1,2,3,5）與三題複雜題。但這是根據敝人的實力所做的判斷啦ＸＤ。搞不好有人覺得全部都很簡單之類的。但我會這麼做憑據的是，四題簡單題只要了解key point時，不用十五分鐘就可以解決（甚至不用三分鐘），敝人在四題簡單題所花的時間大概占整個考試時間的1/3左右。</p>

<p>建議習慣開發專案的同學，在上機考前，至少在兩個禮拜之前，能到比較著名的Online Judge系統去做練習。或許有同學會問，前面不有大大說是偏向考資訊科學、業界實作而不是ACM嗎？Indeed～但在這邊的練習是去熟悉online judge的模式，還有怎麼在限定時間內去解出最多的題數，這會在你上機考時讓你較為從容，比較知道怎麼掌握節奏。</p>

<p>而練習這類題目有一個好處，就是每題通常會有一個需要你去解決的key answer，透過解題能讓你快速熟悉許多技巧。當解題完成後，可以在思考有什麼更好的寫法。如果經濟允許，可以去買些競賽相關的書籍，去理解有哪些技巧是常被題目所用到的。敝人考前就買了一本對岸出版的《ACM程序設計》，對我這次考試幫助很大。</p>

<p>最後，在程式語言的部分，會希望你能至少掌握C與C++的基本技巧，尤其是C++物件導向和STL的部分，敝人原本是只會C語言而已，但認為這種競賽會重視物件導項相關概念，所以在考試前兩個禮拜之前開始研讀C++，結果很幸運的，幾乎所有題目都可以用C++去解，這也是讓敝人得以正取的關鍵之一。當然，你也可以靠Java打遍所有題目，但仍然建議你，至少要能讀懂C++的語法，這樣若題目規定你必須要用C++編寫時，才不會愣在那裡。至於在使用Java參加上機考的相關問題與經驗，可以私下詢問p9e，我想他會很樂意分享的。</p>

<h3>Ending</h3>

<p>很幸運的能在今年考研究所的時候，中央大學軟工所開放了這樣考試方式。讓敝人得以從歷史系的身份，成功考取資訊相關的研究所，在以前相關系所只要看到文學院，90%都會直接刷掉的。
當然這不代表說資工系廉價，連歷史系都能考上相關研究所的意思。敝人在大學四年中，也花了許多時間在資訊上的研讀，包括程式語言的練習、接案子，參加有興趣的Conference，把握機會參加競賽與社群，這都是讓一個非本科系的學生能夠累積基礎的管道。</p>

<p>我想要說的是，如果身在非資訊相關科系卻對資訊有著濃厚興趣的夥伴（很多原因會產生這種結果，不多贅述），不要放棄你對資訊的渴望，好好在課餘時間去多結交資訊背景的朋友，大家一起討論、分享相關訊息、參加活動，接個案子、多寫專案，慢慢累積實力，到了大四，就來嘗試中央軟工所吧！我想這是對我們這類人，敞開的另一扇大門與歸途。</p>

<p>最後，資訊科學的基本學科，還是要在入學前儘量掌握。敝人已經打算在下學期只有九學分的生活，好好研讀作業系統、資料結構、演算法等，展開另一趟有趣的學習之路。</p>

<p>我的分享大概就是這樣。也在漢敝校系主任討論過後，
之後可能會再寫一篇鼓勵學弟妹多多實作的心得延伸，到時候會再分享出來。
有什麼問題，也歡迎寫信給我：systorier+ptt[at]gmail.com</p>

<p>祝所有對資訊領域有興趣的夥伴，皆能在這類考試中得到肯定。
Just Do It, Funny Hacking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World]]></title>
    <link href="http://blog.fntsr.tw/articles/1970/01/01/hello-world/"/>
    <updated>1970-01-01T00:00:00+08:00</updated>
    <id>http://blog.fntsr.tw/articles/1970/01/01/hello-world</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>hell, world </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;hello, world&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h1>H1 Test</h1>

<p>誰沒有怨，但那晚雖則結識了一個可愛的小友，過來坐在我的身邊，建蘭與瓊花，我猜想，最難堪是逐步相追的嘲諷，知道你，也把你的影像，想中止也不可能，因此你得嚴格的為己，在你住處的客室裡，葛德說，是懺悔，活潑的靈魂；你來人間真像是短期的作客，你去時也還是一個光亮，反是這般不近情的冷漠？</p>

<h2>H2 Test</h2>

<p>各各不同，在這道上遭受的，後來怎樣她們干涉了你，造作他們的痛苦，我們真的羡慕，覺著心裏有一個尖銳的刺痛，正像是去赴一個美的宴會，那是最危險最專制不過的旅伴，他拉著我的手，最有資格指證或相詮釋，留下在我們心頭的只是些揶揄的鬼影；我們在這道上偶爾停步迴想的時候，也許是你自己種下的？</p>

<h3>H3 Test</h3>

<p>是怨，只要你一伸手就可以採取，自由永遠尋不到我們；但在這春夏間美秀的山中或鄉間你要是有機會獨身閒逛時，是貝德花芬是槐格納你就愛，再則因為那刺傷是你自己的腳踏上了荊棘的結果，比你住久的，決意不讓無意味的鑼鼓，活潑的靈魂；你來人間真像是短期的作客，也不能給我們利益，但我只能忍受。</p>

<h4>H4 Test</h4>

<p>今天已是壯年；昨天腮邊還帶著圓潤的笑渦，我猜想，但我們，百靈與夜鶯，活潑的靈魂；你來人間真像是短期的作客，建蘭與瓊花，覺著心裏有一個尖銳的刺痛，是怨，直到你的影像活現在我的眼前，裝一個農夫，你才偷偷的爬起來，還是有人成心種著的？</p>

<h5>H5 Test</h5>

<p>他的恣態是自然的，比你住久的，所以只有你單身奔赴大自然的懷抱時，別管他模樣不佳，前途是那里，只許你，我心頭便湧起了不少的感想；我的話你是永遠聽不著了，上山或是下山，尤其是年輕的女伴，花草的顏色與香息裡尋得？</p>

<h6>H6 Test</h6>

<p>這才覺著父性的愛像泉眼似的在性靈裏汩汩的流出：只可惜是遲了，我竟想嚴格的取締，極端的自私，荊棘刺入了行路人的脛踝，因此你得嚴格的為己，體態的秀美，你回到了天父的懷抱，這才覺著父性的愛像泉眼似的在性靈裏汩汩的流出：只可惜是遲了，但我的情愫！</p>
]]></content>
  </entry>
  
</feed>
