<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | 深藏若虛]]></title>
  <link href="http://blog.fntsr.tw/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.fntsr.tw/"/>
  <updated>2014-12-15T21:55:04+08:00</updated>
  <id>http://blog.fntsr.tw/</id>
  <author>
    <name><![CDATA[Ruoshi Ling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Can't Resolve github.com]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/11/08/docker-cant-resolve-github-dot-com/"/>
    <updated>2014-11-08T02:30:47+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/11/08/docker-cant-resolve-github-dot-com</id>
    <content type="html"><![CDATA[<h2>Docker 無法解析 github.com</h2>

<p>在 Ubuntu 環境下，使用 Docker 架設 Discourse 時遇到了問題，錯誤訊息如下：</p>

<pre><code>fatal: unable to access 'https://github.com/SamSaffron/pups.git/': Could not resolve host: github.com
fb4e120a8b107f0ec1e07b3e21a3a1f31e3a5879d30da65242e0333b30533efa
FAILED TO BOOTSTRAP
</code></pre>

<p>這個問題的是 DNS 相關的錯誤，我們只要幫 Docker 指定 DNS Server 即可。解決辦法依照你安裝 Docker 的方式而異。</p>

<!-- more -->


<h3>via Ubuntu Package</h3>

<p>首先，打開 docker 的設定檔。</p>

<pre><code class="bash">$ vim /etc/default/docker
</code></pre>

<p>然後，將下面這行取消註解。</p>

<pre><code class="bash">DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"
</code></pre>

<p>最後，重啟 Docker Server</p>

<pre><code class="bash">$ sudo service docker restart
</code></pre>

<h3>via Binary</h3>

<p>如果你是透過二進位檔案執行 Docker server，你只需在啟動 Docker daemon 時，加上 DNS 參數即可。如下：</p>

<pre><code class="bash">$ sudo docker -d -D --dns 8.8.8.8 --dns 8.8.4.4 &amp;
</code></pre>

<p><code>8.8.8.8</code>和<code>8.8.4.4</code>都是 Google 的 DNS，你也可以增修你喜歡的 DNS Server。</p>

<h1>Reference</h1>

<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-14-04">How To Install Discourse on Ubuntu 14.04</a></li>
<li><a href="https://meta.discourse.org/t/afatal-unable-to-access-https-github-com-samsaffron-pups-git-could-not-resolve-host-github-com/18611">A fatal: unable to access ‘https://github.com/SamSaffron/pups.git/’: Could not resolve host: github.com</a></li>
<li><a href="http://stackoverflow.com/questions/24151129/docker-network-calls-fail-during-image-build-on-corporate-network">Docker - Network calls fail during image build on corporate network</a></li>
<li><a href="http://linux.vbird.org/linux_server/0350dns.php#DNS_resolver_file">鳥哥的 Linux 私房菜 - 第十九章、主機名稱控制者： DNS 伺服器</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Docker Data Volume on OS X]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/10/31/use-docker-data-volume-on-os-x/"/>
    <updated>2014-10-31T22:05:15+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/10/31/use-docker-data-volume-on-os-x</id>
    <content type="html"><![CDATA[<h2>在 OS X 上，透過 boot2docker 使用 docker 的 data volume</h2>

<p>Docker 1.3 在 2014-10-16 釋出。其中，在方便性上最讓人注目的更新，除了 exec 指令以外，就是 boot2docker 在 Mac OS X 資料夾分享功能的改進，本文主要是針對後者去做講述。</p>

<!-- more -->


<h1>前言</h1>

<p>由於 Docker 只支持 Linux 作業系統，倘若要於 OS X 使用 Docker ，會使用 boot2docker 這個工具，在 VirtualBox 上建立一個 boot2docker-vm 的映像檔。然後，透過這個 Linux VM 去操作 Docker。</p>

<p>但是，在 Docker 1.3 之前，因為 boot2docker 的映像檔沒有支援 VirtualBox Guest Additions ，所以無法使用 Virtualbox 分享資料夾的功能，將 OS X 的資料夾掛載到虛擬機器裡。因此必須另外自行製作有支援該 VirtualBox Guest Additions 的映像檔（或是下載別人做好的），然後設定 Virtual Box ，把 OS X 的資料夾自動掛載到虛擬機器裡。</p>

<p>不過，隨著 Docker 1.3 釋出，boot2docker 也一併將這個功能引入。使用者可以直接透過 boot2docker 的映像檔使用這功能，而且它會自動把 <code>/Users</code> 資料夾掛載到虛擬機器裡，不需要另外設定！</p>

<p>下圖是在 OS X 上，使用 boot2docker 建立 data volume 的示意圖，希望能幫助各位了解運作原理。</p>

<p><a href="/images/posts/2014-10-31-use-docker-data-volume-on-os-x-001.png"><img src="/images/posts/2014-10-31-use-docker-data-volume-on-os-x-001.png" width="512" height="384"></a></p>

<h1>前置作業</h1>

<p>在開始前，必須先安裝或更新 docker 和 boot2docker 到 1.30 以上的版本，更新的方法在我前一篇文章 <a href="/articles/2014/10/31/upgrade-docker-and-boot2docker-on-os-x/">Upgrade Docker and Boot2docker on OS X</a> 已經說明了，可以參考看看，這邊就不多贅述。</p>

<p>接著在 Terminal 下 <code>$ boot2docker ssh 'ls -al /Users'</code> 的指令，確認是否已經成功掛載。如果成功，應該會出現 <code>/Users</code> 的目錄。</p>

<pre><code class="bash">$ boot2docker ssh 'ls -al /Users'
drwxr-xr-x    1 docker   staff          204 Mar 29  2014 .
drwxr-xr-x   17 root     root           400 Oct 31 10:29 ..
-rw-r--r--    1 docker   staff            0 Aug 25  2013 .localized
drwxrwxrwx    1 docker   staff          306 Oct 18 04:08 Shared
drwxr-xr-x    1 docker   staff         3774 Oct 31 17:52 user5566
</code></pre>

<h1>Data Volume</h1>

<p>本文利用 ubuntu 的 images 去做建立 data volume 的示範。開始前，再次強調，因為 boot2docker 只有把 OS X 的 <code>/Users</code> 資料夾掛載到虛擬機上，所以 data volume 的 host 資料夾必須在 <code>/Users</code> 底下。</p>

<h3>首先</h3>

<p>把想建立 data volume 的資料夾與檔案準備好。</p>

<pre><code class="bash">$ mkdir ~/docker-volume/test
$ touch ~/docker-volume/test/volume-test.md
$ ls -al ~/docker-volume/test
total 0
drwxr-xr-x  3 user5566  staff  102 11  1 02:01 .
drwxr-xr-x  3 user5566  staff  102 11  1 02:01 ..
-rw-r--r--  1 user5566  staff    0 11  1 02:01 volume-test.md
</code></pre>

<h3>接著</h3>

<p>建立一個 Container 。</p>

<p>並且，將剛才建立的資料夾，透過 data volume 掛載到 <code>/volume_test</code> 的位置。並且確認是否成功。</p>

<pre><code class="bash"># 建立 Container
$ docker run -it -v ~/docker-volume/test:/volume_test ubuntu:latest /bin/bash
root@d0d097097657:/#

# 測試 data volume 是否成功
root@d0d097097657:/# ls -al /volume_test/
total 4
drwxr-xr-x  1 1000 staff  102 Oct 31  2014 ./
drwxr-xr-x 50 root root  4096 Oct 31 17:51 ../
-rw-r--r--  1 1000 staff    0 Oct 31  2014 volume-test.md
</code></pre>

<h3>最後</h3>

<p>在 OS X 和 Container 中，都建立一個檔案，以測試同步與否。</p>

<pre><code class="bash"># OS X
$ touch ~/docker-volume/test/file-from-osx.md

# Container
root@d0d097097657:/# touch /volume_test/file-from-container.md
</code></pre>

<p>看起來是成功了，歡呼囉！</p>

<pre><code class="bash"># OS X 確認
$ ls -al ~/docker-volume/test
total 0
drwxr-xr-x  5 user5566  staff   170B 11  1 02:12 .
drwxr-xr-x  3 user5566  staff   102B 11  1 02:01 ..
-rw-r--r--  1 user5566  staff     0B 11  1 01:58 file-from-container.md
-rw-r--r--  1 user5566  staff     0B 11  1 02:12 file-from-osx.md
-rw-r--r--  1 user5566  staff     0B 11  1 02:01 volume-test.md

# Container 確認
root@d0d097097657:/# ls -al /volume_test/
total 4
drwxr-xr-x  1 1000 staff  170 Oct 31  2014 .
drwxr-xr-x 50 root root  4096 Oct 31 17:51 ..
-rw-r--r--  1 1000 staff    0 Oct 31 17:58 file-from-container.md
-rw-r--r--  1 1000 staff    0 Oct 31  2014 file-from-osx.md
-rw-r--r--  1 1000 staff    0 Oct 31  2014 volume-test.md
</code></pre>

<h1>後記</h1>

<p>Data Volume 是 docker 在應用 LXC 時，一個非常重要的功能。在初學 Docker 前，因為不懂 boot2docker 的運作原理，在這功能鬼打牆好多次，都無法成功。後來知道原理後，卻覺得在 OS X 實作這功能太麻煩了，改用 VPS 直接用 Linux 去玩 Docker 。還好，現在 boot2docker 已經做好這件事了，讓我們可以更快樂的在 OS X 上面玩 Docker ，尤其是進行開發啦！(rock)</p>

<p>剛好，這塊是我在 <a href="/articles/2014/10/18/how-to-deploy-php-projects-with-docker/">PHPConf 演講</a> 裡，只有稍微帶過的部分，希望這篇文章能補足當時因為時間關係，而沒講明的部分。在之後，我也會把握空閒時間，多寫幾篇有關 Docker 的文章，補足演講的缺口，希望大家會喜歡。 =D</p>

<p>最後，祝各位在 OS X 上，愜意地 Docker 囉！</p>

<h1>Reference</h1>

<ul>
<li><a href="https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c">boot2docker together with VirtualBox Guest Additions: How to mount /Users into boot2docker</a></li>
<li><a href="https://docs.docker.com/userguide/dockervolumes/">Managing Data in Containers</a></li>
<li><a href="https://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/">DOCKER 1.3: SIGNED IMAGES, PROCESS INJECTION, SECURITY OPTIONS, MAC SHARED DIRECTORIES</a></li>
<li><a href="https://github.com/boot2docker/boot2docker">boot2docker/boot2docker</a></li>
<li><a href="https://github.com/boot2docker/boot2docker/issues/282#issuecomment-44601104">Volumes: vboxguest + vboxsf modules #282</a></li>
<li><a href="https://www.facebook.com/groups/docker.taipei/permalink/1522080854693939/">Post of Docker.Taipei</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade Docker and Boot2docker on OS X]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/10/31/upgrade-docker-and-boot2docker-on-os-x/"/>
    <updated>2014-10-31T17:59:58+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/10/31/upgrade-docker-and-boot2docker-on-os-x</id>
    <content type="html"><![CDATA[<h2>在 OS X 更新 Docker 和 Boot2docker</h2>

<p>在 OS X 安裝 Docker 和 Boot2docker 有兩種方式，一種是下載 *.pkg 進行安裝，一種是使用 homebrew 進行安裝。本文前面會描述兩者更新的方式，然後說明如何把 Boot2docker 的 VM Image 更新，也就是把 Docker Server 更新到新版。</p>

<!-- more -->


<h2>Step1: Turn Off Boot2docker</h2>

<pre><code class="bash">$ boot2docker stop
</code></pre>

<h2>Step2: Upgrade Boot2docker</h2>

<p>依照您安裝 boot2docker 的方式進行更新</p>

<h4>Homebrew</h4>

<pre><code class="bash">$ brew update
$ brew upgrade docker
$ brew upgrade boot2docker
</code></pre>

<h4>Packge Installer</h4>

<ol>
<li>到 <a href="https://github.com/boot2docker/osx-installer/releases">boot2docker/osx-installer</a> 下載最新版本的安裝檔。</li>
<li>點擊安裝檔進行安裝。</li>
</ol>


<h2>Step3: Upgrade Boot2docker Image</h2>

<p>按照「正常程序」升級映像檔即可。</p>

<p>官網是說如果你是 <code>0.11.1-pre1</code> 之前的版本，建議刪除原有映像檔，但是這已經是很早之前的版本了。所以除非有什麼無法升級的意外，才需要「刪除原有映像檔」的方式更新。</p>

<h4>正常程序</h4>

<pre><code class="bash">$ boot2docker stop
$ boot2docker download
$ boot2docker up
</code></pre>

<h4>刪除原有映像檔</h4>

<pre><code class="bash">$ boot2docker stop
$ boot2docker delete     // 注意：本指令會刪除現有的VM映像檔
$ boot2docker download
$ boot2docker init
$ boot2docker up
</code></pre>

<h2>Step4: Check Version</h2>

<p>確認你的版本是否都為最新版了。寫本文時最新版是1.3.0。</p>

<pre><code class="bash">$ boot2docker version
Boot2Docker-cli version: v1.3.0
Git commit: deafc19

$ docker version
Client version: 1.3.0
Client API version: 1.15
Go version (client): go1.3.3
Git commit (client): c78088f
OS/Arch (client): darwin/amd64
Server version: 1.3.1
Server API version: 1.15
Go version (server): go1.3.3
Git commit (server): 4e9bbfa
</code></pre>

<h2>Reference</h2>

<ol>
<li><a href="http://docs.docker.com/installation/mac/#upgrading">Installing Docker on Mac OS X #Upgrading</a></li>
<li><a href="http://blog.javabien.net/2014/03/17/upgrade-docker-and-boot2docker-on-osx/">UPGRADE DOCKER AND BOOT2DOCKER ON OSX</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Deploy PHP Projects With Docker]]></title>
    <link href="http://blog.fntsr.tw/articles/2014/10/18/how-to-deploy-php-projects-with-docker/"/>
    <updated>2014-10-18T17:00:00+08:00</updated>
    <id>http://blog.fntsr.tw/articles/2014/10/18/how-to-deploy-php-projects-with-docker</id>
    <content type="html"><![CDATA[<p>本簡報是為PHPConf2014議程所準備的，但陸續會在針對簡報做維護，並且在這邊回答會眾對於當天大會聽講但是沒有聽懂的部分。</p>

<ul>
<li>影片： (請耐心等候主辦單位釋出)</li>
<li>簡報： <a href="https://speakerdeck.com/fntsrlike/how-to-deploy-php-projects-with-docker">SpeakerDeck</a> | <a href="http://www.slideshare.net/ruoshiling/how-to-deploy-php-projects-with-docker">SlideShare</a></li>
</ul>


<div style="width:400px;">
<script async class="speakerdeck-embed" data-id="4be222a03e440132e5ed2a2ba31f9bce" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
</div>


<!-- more -->


<h2>Updated Log</h2>

<h3>2014-10-25 Sat. | v2.1</h3>

<ul>
<li>因為SpeakDeck原本的項目一直無法轉檔成功，於是另外再開一個項目重新上傳，網址不變。</li>
</ul>


<h3>2014-10-24 Fri. | v2</h3>

<ul>
<li>修正演講時發現的小錯。</li>
<li>補上缺少的Expose Port的投影片。</li>
</ul>


<h2>Feedback</h2>

<ul>
<li>講起來太快，很像在趕行程。</li>
<li>實戰經驗說的不足。缺少了運用在正式伺服器上面的相關實作經驗</li>
<li>缺少實務面 Scalability in Mind</li>
<li>講者還只是學生沒有真正在軟體業待過，對軟體公司複數伺服器的自動化部署應該是完全沒有概念。</li>
<li>AUFS的理解也不太正確。</li>
<li>LXC是Docker 0.38的限制，Docker 1.0已經開發了自己的container lib而不再以linux container為預設值。</li>
</ul>


<h2>Q &amp; A</h2>
]]></content>
  </entry>
  
</feed>
